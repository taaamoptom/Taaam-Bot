import os
import threading
import time
from dotenv import load_dotenv
import telebot
from telebot import types
from flask import Flask
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ==== Load .env ====
load_dotenv()



BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
TOPIC_ID = int(os.getenv("TOPIC_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(BOT_TOKEN)

# ==== Flask app ====
app = Flask(__name__)
user_data = {}
users = set()  # barcha foydalanuvchilar ro‚Äòyxati



# ==== Google Credentials ====
google_creds = {
    "type": os.getenv("GOOGLE_TYPE"),
    "project_id": os.getenv("GOOGLE_PROJECT_ID"),
    "private_key_id": os.getenv("GOOGLE_PRIVATE_KEY_ID"),
    "private_key": os.getenv("GOOGLE_PRIVATE_KEY").replace("\\n", "\n"),
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": os.getenv("GOOGLE_CLIENT_ID"),
    "auth_uri": os.getenv("GOOGLE_AUTH_URI"),
    "token_uri": os.getenv("GOOGLE_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("GOOGLE_AUTH_PROVIDER_X509_CERT_URL"),
    "client_x509_cert_url": os.getenv("GOOGLE_CLIENT_X509_CERT_URL"),
}

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)

sheet_file = client.open("Lidlar")
sheets = {
    "üë© Mohigul": sheet_file.worksheet("Mohigul"),
    "üë© Sadoqatxon": sheet_file.worksheet("Sadoqatxon")
}

# ==== Viloyatlar va tumanlar ====
regions = {
    "Toshkent viloyati": [
        "Nurafshon shahri", "Bekobod tumani", "Bo ªka tumani", "Bo ªstonliq tumani",
        "Chinoz tumani", "Ohangaron tumani", "Oqqo ªrg ªon tumani", "Parkent tumani",
        "Piskent tumani", "Quyichirchiq tumani", "O ªrtachirchiq tumani", "Yangiyo ªl tumani",
        "Zangiota tumani", "Toshkent tumani", "Yuqorichirchiq tumani", "Qibray tumani",
    ],
    
    "Toshkent shahri": [
        "Chilonzor tumani", "Mirzo Ulug‚Äòbek tumani", "Mirobod tumani", "Sergeli tumani",
        "Shahrixon tumani", "Sho ªrchiq tumani", "Toshkent shahri", "Uchqo ªrg ªon tumani",
        "Xo ªjaobod tumani", "Yunusobod tumani", "Zafarobod tumani", "Zomin tumani",
    ],

    "Farg‚Äòona viloyati": [
        "Farg‚Äòona shahri", "Farg‚Äòona tumani", "Beshariq tumani", "Bog`dod tumani", "Buvayda tumani", "Dang‚Äòara tumani", 
        "Furqat tumani", "Qo‚Äòshtepa tumani", "Quva tumani", "Quvasoy tumani", "Oltiariq tumani", 
        "Rishton tumani", "So'x tumani", "Toshloq tumani", "Uchko‚Äòprik tumani", "Yozyovon tumani", "Qo‚Äòqon shahri",
    ],
    
    "Andijon viloyati": [
        "Andijon shahri", "Andijon tumani", "Asaka tumani", "Baliqchi tumani",
        "Bo ªston tumani", "Buloqboshi tumani", "Izboskan tumani", "Jalaquduq tumani",
        "Qo ªrg ªontepa tumani", "Marhamat tumani", "Oltinko ªl tumani", "Paxtaobod tumani", 
        "Shahrixon tumani", "Ulug ªnor tumani", "Xo ªjaobod tumani",
    ],
    
    "Namangan viloyati": [
        "Namangan shahri", "Chortoq tumani", "Chust tumani", "Kosonsoy tumani",
        "Mingbuloq tumani", "Namangan tumani", "Norin tumani", "Pop tumani",
        "To ªraqo ªrg ªon tumani", "Uchqo ªrg ªon tumani", "Uychi tumani", "Yangiqo ªrg ªon tumani",
    ],

    "Qashqadaryo viloyati": [
        "Qarshi shahri", "Chiroqchi tumani", "Dehqonobod tumani", "G ªuzor tumani",
        "Kasbi tumani", "Kitob tumani", "Koson tumani", "Mirishkor tumani",
        "Muborak tumani", "Nishon tumani", "Qamashi tumani", "Qarshi tumani",
        "Shahrisabz shahri", "Shahrisabz tumani", "Yakkabog ª tumani",
    ],
    
    "Surxondaryo viloyati": [
        "Termiz shahri", "Angor tumani", "Bandixon tumani", "Boysun tumani",
        "Denov tumani", "Jarqo ªrg ªon tumani", "Muzrabot tumani", "Oltinsoy tumani",
        "Qiziriq tumani", "Qumqo ªrg ªon tumani", "Sariosiyo tumani",
        "Sherobod tumani", "Sho ªrchi tumani", "Termiz tumani", "Uzun tumani"
    ],

    "Navoiy viloyati": [
        "Navoiy shahri", "Zarafshon shahri", "Karmana tumani", "Konimex tumani",
        "Navbahor tumani", "Nurota tumani", "Qiziltepa tumani", "Xatirchi tumani",
        "Tomdi tumani", "Uchquduq tumani"
    ],
      
    "Xorazm viloyati": [
        "Urganch shahri", "Bog ªot tumani", "Gurlan tumani", "Xonqa tumani",
        "Hazorasp tumani", "Shovot tumani", "Yangiariq tumani",
        "Yangibozor tumani", "Qo ªshko ªpir tumani", "Tupproqqal ºa tumani"
    ],
      
    "Samarqand viloyati": [
        "Samarqand shahri", "Bulung ªur tumani", "Ishtixon tumani", "Jomboy tumani",           
        "Kattaqo ªrg ªon tumani", "Kattaqo ªrg ªon shahri", "Narpay tumani",
        "Nurobod tumani", "Oqdaryo tumani", "Paxtachi tumani",
        "Pastdarg ªom tumani", "Payariq tumani", "Qo ªshrabot tumani",
        "Tayloq tumani", "Urgut tumani"
    ],
      
    "Jizzax viloyati": [
        "Jizzax shahri", "Arnasoy tumani", "Baxmal tumani", "Do ªstlik tumani",
        "Forish tumani", "G ªallaorol tumani", "Mirzacho ªl tumani",
        "Paxtakor tumani", "Yangiobod tumani", "Zarbdor tumani",
        "Zafarobod tumani", "Zomin tumani", "Sharof Rashidov tumani"
    ],
      
    "Buxoro viloyati": [
        "Buxoro shahri", "Buxoro tumani", "Qorako ªl tumani", "G ªijduvon tumani",
        "Jondor tumani", "Kogon tumani", "Olot tumani", "Peshku tumani",
        "Romitan tumani", "Shofirkon tumani", "Vobkent tumani",
        "Peshkun tumani", "Kogon shahri (alohida tuman maqomida)"
    ],
      
    "Sirdaryo viloyati": [
        "Guliston shahri", "Guliston tumani", "Sardoba tumani",
        "Boyovut tumani", "Mirzaobod tumani", "Oqoltin tumani",
        "Sayxunobod tumani", "Xovos tumani"
    ],

    "Qoraqalpog‚Äòiston Respublikasi": [
        "Amudaryo tumani", "Beruniy tumani", "Bo ªzattum tumani",
        "Chimboy tumani", "Ellikqal'a tumani", "Kegeyli tumani",
        "Mo ªynoq tumani", "Nukus tumani", "Qanliko ªl tumani",
        "Qo ªng ªirot tumani", "Qorao ªzak tumani", "Shumanay tumani",
        "Taxtako ªpir tumani", "To ªrtko ªl tumani", "Xo ªjayli tumani",  
    ],
}

# ==== Kategoriyalar ====
categories = [
    "Soch taqinchoqlari", "Bijuteriya", "Kosmetika", "Taroq-Oynakcha",
    "Sumka-Hamyon", "Ro‚Äòzg‚Äòor Buyumlari", "O‚Äòyinchoqlar", "Baby shop"
]

# ==== Managerlar ====
managers = {
    "üë© Mohigul": 1926487266,
    "üë© Sadoqatxon": 7566604257
}



def get_manager_name(chat_id):
    for k, v in managers.items():
        if v == chat_id:
            return k
    return None

# ==== Start komandasi ====
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    if chat_id not in managers.values():
        users.add(chat_id)

    if chat_id in managers.values():
        bot.send_message(chat_id, f"üëã Xush kelibsiz! Siz {get_manager_name(chat_id)}.")
        return

    user_data[chat_id] = {"categories": []}
    bot.send_message(chat_id, "üëã Salom! Ism va familiyangizni yozing:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_btn = types.KeyboardButton("üì± Raqamni yuborish", request_contact=True)
    markup.add(phone_btn)
    bot.send_message(chat_id, "üì± Telefon raqamingizni yuboring:", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def get_contact(message):
    chat_id = message.chat.id
    phone = message.contact.phone_number.replace("+", "").replace(" ", "")
    user_data[chat_id]["phone"] = phone
    user_data[chat_id]["username"] = message.from_user.username or "-"
    bot.send_message(chat_id, "‚úÖ Raqam qabul qilindi.", reply_markup=types.ReplyKeyboardRemove())
    show_regions(chat_id)

def show_regions(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for region in regions.keys():
        markup.add(types.KeyboardButton(region))
    bot.send_message(chat_id, "üìç Viloyatingizni tanlang:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in regions.keys())
def get_region(message):
    chat_id = message.chat.id
    user_data[chat_id]["region"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for district in regions[message.text]:
        markup.add(types.KeyboardButton(district))
    bot.send_message(chat_id, f"üìç {message.text} tanlandi. Endi tumanni tanlang:", reply_markup=markup)

@bot.message_handler(func=lambda m: any(m.text in d for d in regions.values()))
def get_district(message):
    chat_id = message.chat.id
    user_data[chat_id]["district"] = message.text
    bot.send_message(chat_id, f"‚úÖ Manzil: {user_data[chat_id]['region']}, {message.text}", reply_markup=types.ReplyKeyboardRemove())
    show_categories(chat_id)

def show_categories(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=cat, callback_data=f"cat:{cat}") for cat in categories]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚úÖ Tasdiqlash", callback_data="confirm"))
    bot.send_message(chat_id, "üìÇ Kategoriyalardan tanlang:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat") or call.data == "confirm")
def callback_handler(call):
    chat_id = call.message.chat.id
    if call.data.startswith("cat:"):
        category = call.data.split(":")[1]
        if category in user_data[chat_id]["categories"]:
            user_data[chat_id]["categories"].remove(category)
        else:
            user_data[chat_id]["categories"].append(category)

        selected = "\n".join([f"- {c}" for c in user_data[chat_id]["categories"]]) or "‚ùå Tanlanmagan"
        bot.edit_message_text(
            f"üìÇ Tanlangan kategoriyalar:\n{selected}\n\nüëá Tanlashni davom eting yoki tasdiqlang.",
            chat_id, call.message.message_id, reply_markup=call.message.reply_markup
        )
    elif call.data == "confirm":
        if not user_data[chat_id]["categories"]:
            bot.answer_callback_query(call.id, "Hech bo‚Äòlmaganda bitta kategoriya tanlang!")
            return
        show_managers(chat_id)

def show_managers(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for m in managers.keys():
        markup.add(types.KeyboardButton(m))
    bot.send_message(chat_id, "ü§µüèª‚Äç‚ôÄÔ∏è Manager tanlang:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in managers.keys())
def get_manager(message):
    chat_id = message.chat.id
    manager_name = message.text
    manager_id = managers[manager_name]
    user_data[chat_id]["manager"] = manager_name

    text = (
        f"üÜï Yangi Lid!\n\n"
        f"üë§ Ism: {user_data[chat_id].get('name')}\n"
        f"üì± Tel: +{user_data[chat_id].get('phone')}\n"
        f"üí¨ Username: @{user_data[chat_id].get('username')}\n\n"
        f"üìç Manzil: {user_data[chat_id]['region']}, {user_data[chat_id]['district']}\n\n"
        f"üìÇ Kategoriyalar:\n" + "\n".join([f"- {c}" for c in user_data[chat_id]['categories']]) +
        f"\n\nü§µüèª‚Äç‚ôÄÔ∏è Manager: {manager_name}"
    )

    send_to_group_topic(text)
    bot.send_message(manager_id, text)
    bot.send_message(chat_id, "‚úÖ Ma‚Äôlumot yuborildi!", reply_markup=types.ReplyKeyboardRemove())

    sheet = sheets[manager_name]
    sheet.append_row([
        user_data[chat_id].get("name"),
        user_data[chat_id].get("phone"),
        user_data[chat_id].get("username"),
        f"{user_data[chat_id]['region']}, {user_data[chat_id]['district']}",
        ", ".join(user_data[chat_id]['categories']),
        manager_name
    ])

def send_to_group_topic(text):
    if TOPIC_ID:
        bot.send_message(chat_id=GROUP_ID, text=text, message_thread_id=TOPIC_ID)
    else:
        bot.send_message(chat_id=GROUP_ID, text=text)

@bot.message_handler(commands=['getid'])
def get_id(message):
    bot.send_message(message.chat.id, f"Chat ID: {message.chat.id}\nTopic ID: {message.message_thread_id}")

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    chat_id = message.chat.id
    if chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå Sizda ruxsat yo‚Äòq.")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        bot.send_message(chat_id, "‚ÑπÔ∏è Foydalanish: /broadcast <xabar>")
        return

    success, fail = 0, 0
    for uid in users:
        try:
            bot.send_message(uid, text)
            success += 1
        except:
            fail += 1

    bot.send_message(chat_id, f"‚úÖ {success} ta foydalanuvchiga yuborildi.\n‚ùå {fail} ta yuborilmadi.")

@app.route('/')
def index():
    return "‚úÖ Bot ishlayapti!"

# ==== Polling with Auto-Restart ====
def run_bot():
    print("‚úÖ Bot ishga tushdi...")
    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print(f"‚ùå Xatolik: {e}")
            time.sleep(5)

if __name__ == "__main__":
    # Botni parallel thread‚Äôda ishga tushirish
    threading.Thread(target=run_bot).start()

    # Render PORT o‚Äòzgaruvchisini ishlatadi
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
